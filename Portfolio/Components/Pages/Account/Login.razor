@page "/account/login"
@using System.ComponentModel.DataAnnotations
@using AspNetCore.Identity.Mongo.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@inject SignInManager<MongoUser> SignInManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<Container>
    
    <Row class="mt-4 mb-4" >
        <Column>
            <h2>Login</h2>
        </Column>
        <Form @onsubmit="HandleValidSubmit" Padding="Padding.Is4" preventdefault="true">
            <AntiforgeryToken/>
            <Column>
                
                <Column>
                    <Field>
                        <FieldLabel RequiredIndicator>Email</FieldLabel>
                        <TextEdit @bind-Text="Email" Role="TextRole.Email" autocomplete="email">
                            <Validation>
                                <ValidationError/>
                            </Validation>
                        </TextEdit>
                    </Field>
                </Column>
                <Column>
                    <Field>
                        <FieldLabel RequiredIndicator>Password</FieldLabel>
                        <TextEdit @bind-Text="Password" Role="TextRole.Password" autocomplete="password">
                            <Validation>
                                <ValidationError/>
                            </Validation>
                        </TextEdit>
                    </Field>
                </Column>
            </Column>
            <Column>
                <Field>
                    <Check @bind-Checked="RememberMe" TValue="bool">Remember me?</Check>
                </Field>
                    <Field>
                    <Button Type="ButtonType.Submit" Color="Color.Primary">Log In</Button>
                </Field>
            </Column>
        </Form>
    </Row>
    
</Container>

@code {
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email address")]
    public string Email { get; set; }
    
    [Required(ErrorMessage = "Password is required")]
    [DataType(DataType.Password)]
    public string Password { get; set; }
    
    [Required]
    public bool RememberMe { get; set; }
    
    private async Task HandleValidSubmit()
    {
        
        var result = await SignInManager.PasswordSignInAsync(Email, Password, RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            // Redirect to the return URL or default page
            string returnUrl = ReturnUrl ?? "/";
            NavigationManager.NavigateTo(returnUrl, true);
            return;
        }
        else
        {
            // Handle login failure (e.g., show error message)
            Console.WriteLine("Invalid login attempt.");
        }
    }
    
}